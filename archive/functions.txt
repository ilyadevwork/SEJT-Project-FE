/*setSelectedSubCategories: (entry) => {
  const tempSubCatagories = get().selectedSubCategories;

  if (entry.length > tempSubCatagories.length) {
    set((state) => ({ selectedSubCategories: entry }));
    const tempSubCatagories = get().selectedSubCategories;
    const currentSeries = get().currentSnapshotSeries;
    const category = get().category as keyof rootIdxType;

    let marketShareTotal = 0;
    let keyPool = 0;
    let temptableData: tableDataType[] = [];
    let tempChartData: object[] = [];
    // We can just search the aggregate data when it comes to listings.
    for (let i = 0; i < currentSeries.length; i++) {
      // iterate through all the selected days in between start and finish by thier index in our data.
      for (let j = 0; j < tempSubCatagories.length; j++) {
        // iterate through every selected category
        const data: any = snapshots[currentSeries[i]].techRoot[category];
        // search that day's data for the category and retrieve its value
        data.find((val: any) => {
          // push data to temp array. x axis will be date.
          if (val.identifier === tempSubCatagories[j]) {
            tempChartData.push({
              identifier: snapshots[currentSeries[i]].date.slice(0, 10),
              value: val.value,
              category: val.identifier,
            });
            temptableData.push({
              identifier: snapshots[currentSeries[i]].date.slice(0, 10),
              key: keyPool++,
              category: val.identifier,
              marketshare: 0,
              value: val.value,
            });
          }
        });
      }
    }
    set((state) => ({
      chartData: {
        ...state.chartData,
        data: tempChartData,
        seriesField: 'category',
      },
      tableData: temptableData,
    }));
  } else {
    const currSubCatagories = get().selectedSubCategories;

    const exclusion = currSubCatagories.filter((ele) => {
      if (!entry.includes(ele)) return ele;
    });

    set((state) => ({ selectedSubCategories: entry }));

    // Copy current data set.
    const dataPtr = get().chartData.data;
    let filteredData: any = [{}];

    // Conditionally exclude the removed element.
    for (let i = 0; i < dataPtr.length; i++) {
      if (dataPtr[i].category !== exclusion[0]) filteredData.push(dataPtr[i]);
    }

    // Clear category after dataset is empty so that chart artifacts are removed.
    if (dataPtr.length !== 0)
      set((state) => ({
        chartData: {
          ...state.chartData,
          data: filteredData,
          seriesField: 'category',
        },
      }));
    else {
      set((state) => ({
        chartData: {
          ...state.chartData,
          data: [{}],
          seriesField: '',
        },
      }));
    }
  }
};

setDate: (entry) => {
    set((state) => ({ selectedDate: entry }));

    const isSeries = get().isSeries;
    const category = get().category as keyof rootIdxType;
    const isAggregate = get().isAggregate;
    const isAllTechChecked = get().isAllTechChecked;
    const selectedSubCategories = get().selectedSubCategories;

    if (!isSeries) {
      if (isAggregate) {
        if (category.toString() !== '') {
          // Not series true, aggregate true & category is selected.
          // Formatting the date so it may be compared.
          const formattedEntry = entry[0].format('YYYY-MM-DD');

          for (let i = 0; i < snapshots.length; i++) {
            if (
              // searching for a match in the selected date, and those that exist in the data set.
              formattedEntry === moment(snapshots[i].date).format('YYYY-MM-DD')
            ) get().setCurrentSnapshot(i);
          }

          const selectedSnap = get().currentSnapshot;

          set((state) => ({
            chartData: {
              ...state.chartData,
              data: snapshots[selectedSnap].techRoot[category],
            },
          }));

          let marketShareTotal = 0;
          let temptableData: tableDataType[] = [];

          for (let obj of get().chartData.data) marketShareTotal = marketShareTotal + obj.value;

          for (let [idx, entry] of get().chartData.data.entries()) {
            temptableData.push({
              key: idx,
              ...entry,
              marketShare: ((entry.value / marketShareTotal) * 100).toFixed(2),
            });
          }
          set((state) => ({ tableData: temptableData }));
        } else {
          // If catagories is empty just update the selected snapshot.
          const formattedEntry = entry[0].format('YYYY-MM-DD');

          for (let i = 0; i < snapshots.length; i++) {
            if (formattedEntry === moment(snapshots[i].date).format('YYYY-MM-DD')) get().setCurrentSnapshot(i);
          }
        }
      } else {
        // Empty catagory selection check.
        if (category.toString() !== '') {
          // Not series true, aggregate false & category is selected.
          if (selectedSubCategories.length !== 0) set((state) => ({ selectedDate: entry }));

          const formattedEntry = entry[0].format('YYYY-MM-DD');

          for (let i = 0; i < snapshots.length; i++) {
            if (
              // searching for a match in the selected date, and those that exist in the data set.
              formattedEntry === moment(snapshots[i].date).format('YYYY-MM-DD')
            ) get().setCurrentSnapshot(i);
          }

          const selectedSnap = get().currentSnapshot;

          if (isAllTechChecked === true) {
          }
        } else {
          // If catagories is empty just update the selected snapshot.
          const formattedEntry = entry[0].format('YYYY-MM-DD');

          for (let i = 0; i < snapshots.length; i++) {
            if (formattedEntry === moment(snapshots[i].date).format('YYYY-MM-DD')) get().setCurrentSnapshot(i);
          }
        }
      }
    } else {
      if (get().selectedSubCategories.length > 1) {
        set((state) => ({ selectedDate: entry }));
        const tempSeries: number[] = [];

        for (let i = 0; i < snapshots.length; i++) {
          if (
            moment(snapshots[i].date).format('YYYY-MM-DD') >= entry[0].format('YYYY-MM-DD')
            && moment(snapshots[i].date).format('YYYY-MM-DD') <= entry[1].format('YYYY-MM-DD')
          ) {
            tempSeries.push(i);
          }
        }
        get().setCurrentSeries(tempSeries);

        const tempCatagories = get().selectedSubCategories;

        let tempChartData: object[] = [];
        // We can just search the aggregate data when it comes to listings.
        for (let j = 0; j < tempCatagories.length; j++) {
          // iterate through all the selected days in between start and finish by thier index in our data.
          for (let i = 0; i < tempSeries.length; i++) {
            // iterate through every selected category
            const data: any = snapshots[tempSeries[i]].techRoot[category];
            // search that day's data for the category and retrieve its value
            data.find((val: any) => {
              // push data to temp array. x axis will be date.
              if (val.identifier === tempCatagories[j]) {
                tempChartData.push({
                  identifier: snapshots[tempSeries[i]].date.slice(0, 10),
                  value: val.value,
                  category: val.identifier,
                });
              }
            });
          }
        }
        set((state) => ({
          chartData: {
            ...state.chartData,
            data: tempChartData,
            seriesField: 'category',
          },
        }));
      } else {
        set((state) => ({ selectedDate: entry }));
        const tempSeries: number[] = [];

        for (let i = 0; i < snapshots.length; i++) {
          if (
            moment(snapshots[i].date).format('YYYY-MM-DD') >= entry[0].format('YYYY-MM-DD')
            && moment(snapshots[i].date).format('YYYY-MM-DD') <= entry[1].format('YYYY-MM-DD')
          ) {
            tempSeries.push(i);
          }
        }
        get().setCurrentSeries(tempSeries);
      }
    }
  },
*/